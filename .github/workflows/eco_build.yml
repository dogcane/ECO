name: ECO Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [published]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true  
  DOTNET_CLI_TELEMETRY_OPTOUT: true  

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
         os: [ ubuntu-latest ]         
#        os: [ ubuntu-latest, windows-latest, macos-latest ]
    
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --no-restore --verbosity normal

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    needs: build
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

#  dast-zap:
#    name: OWASP ZAP Baseline Scan
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#      - name: Run OWASP ZAP Baseline Scan
#        uses: zaproxy/action-baseline@v0.12.0
#        with:
#          target: 'http://localhost:5000' # Change this to your running app's URL
#        continue-on-error: true
  
  deploy:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    env:      
      NUGET_FEED: https://api.nuget.org/v3/index.json
      NUGET_KEY: ${{ secrets.NUGET_KEY }}      
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Install dependencies
        run: dotnet restore      
      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Pack        
        run: |
            dotnet pack -v normal -c Release --no-restore --include-symbols --include-source ./src/ECO/Core/**/ECO.csproj
            dotnet pack -v normal -c Release --no-restore --include-symbols --include-source ./src/ECO/Core/**/ECO.DomainEvents.csproj
            dotnet pack -v normal -c Release --no-restore --include-symbols --include-source ./src/ECO/Core/**/ECO.EventSourcing.csproj
            dotnet pack -v normal -c Release --no-restore --include-symbols --include-source ./src/ECO/Core/**/ECO.Integrations.Microsoft.DependencyInjection.csproj
            dotnet pack -v normal -c Release --no-restore --include-symbols --include-source ./src/ECO/Core/**/ECO.Integrations.Moq.csproj
            dotnet pack -v normal -c Release --no-restore --include-symbols --include-source ./src/ECO/Core/**/ECO.Providers.EntityFramework.csproj
            dotnet pack -v normal -c Release --no-restore --include-symbols --include-source ./src/ECO/Core/**/ECO.Providers.InMemory.csproj
            dotnet pack -v normal -c Release --no-restore --include-symbols --include-source ./src/ECO/Core/**/ECO.Providers.Marten.csproj
            dotnet pack -v normal -c Release --no-restore --include-symbols --include-source ./src/ECO/Core/**/ECO.Providers.MongoDB.csproj
            dotnet pack -v normal -c Release --no-restore --include-symbols --include-source ./src/ECO/Core/**/ECO.Providers.NHibernate.csproj

      - name: Push NuGet Feed ECO
        run: |
            dotnet nuget push ./src/ECO/Core/ECO/bin/Release/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
            dotnet nuget push ./src/ECO/Core/ECO.DomainEvents/bin/Release/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
            dotnet nuget push ./src/ECO/Core/ECO.EventSourcing/bin/Release/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
            dotnet nuget push ./src/ECO/Core/ECO.Integrations.Microsoft.DependencyInjection/bin/Release/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
            dotnet nuget push ./src/ECO/Core/ECO.Integrations.Moq/bin/Release/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
            dotnet nuget push ./src/ECO/Core/ECO.Providers.EntityFramework/bin/Release/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
            dotnet nuget push ./src/ECO/Core/ECO.Providers.InMemory/bin/Release/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
            dotnet nuget push ./src/ECO/Core/ECO.Providers.Marten/bin/Release/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
            dotnet nuget push ./src/ECO/Core/ECO.Providers.MongoDB/bin/Release/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY
            dotnet nuget push ./src/ECO/Core/ECO.Providers.NHibernate/bin/Release/*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY